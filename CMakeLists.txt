cmake_minimum_required(VERSION 3.4.3)
project(hip)

#############################
# Setup config generation
#############################
string(TIMESTAMP _timestamp UTC)
set(_versionInfo "# Auto-generated by cmake\n")
set(_buildInfo "# Auto-generated by cmake on ${_timestamp} UTC\n")
macro(add_to_config _configfile _variable)
    set(${_configfile} "${${_configfile}}${_variable}=${${_variable}}\n")
endmacro()


#############################
# Configure variables
#############################
# Determine HIP_PLATFORM
set(HIP_PLATFORM mlcc)

set(HIP_COMPILER mlcc)

# Determine HIP_RUNTIME
# Either HCC or VDI; default is HCC
set(HIP_RUNTIME MLCC)


# Set default build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
endif()

set(MLCC $ENV{MLCC})

include_directories(${PROJECT_SOURCE_DIR}/include)
set(HIP_CLANG_BUILD_FLAGS)
set(MLVM_INCLUDE $ENV{MLVM_INCLUDE})
set(MLVM_LD_FLAGS $ENV{MLVM_LD_FLAGS})

execute_process(COMMAND ${MLCC}/bin/clang --version
    COMMAND grep version
    COMMAND cut -d ' ' -f3
    OUTPUT_VARIABLE CLANG_VERSION)

set(MLCC_CLANG_INCLUDE_DIR ${MLCC}/lib/clang/${CLANG_VERSION}/include/)
#if(COMPILE_HIP_ATP_MARKER)
#    include_directories(/opt/rocm/profiler/CXLActivityLogger/include)
#    set(HIP_CLANG_BUILD_FLAGS "${HIP_CLANG_BUILD_FLAGS} -DCOMPILE_HIP_ATP_MARKER=1")
#endif()

# Add HIP_VERSION to CMAKE_<LANG>_FLAGS
set(HIP_VERSION_PATCH 18072)
set(HIP_CLANG_BUILD_FLAGS "${HIP_CLANG_BUILD_FLAGS} -std=c++14 -DHIP_VERSION_MAJOR=${HIP_VERSION_MAJOR} -DHIP_VERSION_MINOR=${HIP_VERSION_MINOR} -DHIP_VERSION_PATCH=${HIP_VERSION_PATCH}")

# Add remaining flags
execute_process(COMMAND "${MLCC}/bin/llvm-config --cxxflags" OUTPUT_VARIABLE CLANG_CXX_FLAGS)
set(HIP_CLANG_BUILD_FLAGS "${HIP_CLANG_BUILD_FLAGS} -fPIC ${CLANG_CXX_FLAGS} ${MLVM_INCLUDE} -I${MLCC_CLANG_INCLUDE_DIR}")

# Set compiler and compiler flags
set(CMAKE_CXX_COMPILER "${MLCC}/bin/clang++")
#set(CMAKE_CXX_COMPILER "${MLCC}/bin/mlcc")
set(CMAKE_C_COMPILER   "${MLCC}/bin/clang")
#set(CMAKE_C_COMPILER   "${MLCC}/bin/mlcc")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${HIP_CLANG_BUILD_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${HIP_CLANG_BUILD_FLAGS}")

set(SOURCE_FILES_RUNTIME
    src/code_object_bundle.cpp
    src/hip_clang.cpp
    src/hip_hcc.cpp
    src/hip_context.cpp
    src/hip_device.cpp
    src/hip_memory.cpp
    #src/hip_device_memory.cpp
    src/hip_error.cpp
    src/hip_event.cpp
    src/hip_fatbin.cpp
    src/hip_peer.cpp
    src/hip_stream.cpp
    src/hip_module.cpp
    src/hip_db.cpp
    src/grid_launch.cpp
    src/hip_texture.cpp
    src/hip_surface.cpp
    src/hip_intercept.cpp
    src/env.cpp
    src/h2f.cpp)

add_compile_options(-D__clang__)
add_compile_options(-D__HIP__)
add_compile_options(-D__hcc_workweek__=18370)  # workaround if not using hcc to compile

set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lpthread")
#execute_process(COMMAND ${HCC_HOME}/bin/hcc-config --ldflags OUTPUT_VARIABLE HCC_LD_FLAGS)
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MLVM_LD_FLAGS} -Wl,-Bsymbolic")
#set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} --amdgpu-target=gfx600 --amdgpu-target=gfx701 --amdgpu-target=gfx803 --amdgpu-target=gfx900 --amdgpu-target=gfx906")
#if(COMPILE_HIP_ATP_MARKER)
#    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -L/opt/rocm/profiler/CXLActivityLogger/bin/x86_64 -lCXLActivityLogger")
#endif()
add_library(hip_clang SHARED ${SOURCE_FILES_RUNTIME})
add_library(hip_clang_static STATIC ${SOURCE_FILES_RUNTIME})

#if(HIP_COMPILER STREQUAL "clang")
    #target_link_libraries(hip_clang PRIVATE runtime)
    #target_link_libraries(hip_clang_static PRIVATE umd_executable)
#endif()

#string(REPLACE " " ";" CLANG_CXX_FLAGS_LIST ${CLANG_CXX_FLAGS})
#foreach(TARGET hip_clang hip_clang_static)
#foreach(TARGET hip_clang_static)
#    target_include_directories(${TARGET} SYSTEM INTERFACE $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/include>;${HCS_PATH}/include)
#endforeach()
#add_library(host INTERFACE)
#target_link_libraries(host INTERFACE hip_clang)
#add_library(device INTERFACE)


# vim: ts=4:sw=4:expandtab:smartindent
